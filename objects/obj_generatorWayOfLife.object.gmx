<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initial startup
//GLOBAL VARIABLES
//iniChance = global.iniChance; //between 0 and 100
//birthLimit = global.birthLimit; //between 1 and 8
//deathLimit = global.deathLimit; //between 1 and 8
//numRun = global.numRun;     //between 1 and 10
//tileSize = global.tileSize;   //power of 2

//variables
timer = current_time;
height = (room_height / global.tileSize);
width = (room_width / global.tileSize);
color0 = c_blue;
color1 = c_green;
terrainMap = array_create(height);
oldMap = array_create(height);
for (var i = 0; i &lt; array_length_1d(terrainMap); i++) {
    terrainMap[i] = array_create(width);
    oldMap = array_create(width);
}

show_debug_message("variables initialised in " + string((current_time - timer)/1000) + "s");
timer = current_time;

//initPos()
randomize();
for (var Y = 0; Y &lt; width; Y++) {
    for (var X = 0; X &lt; height; X++) {
        if (irandom(100) &lt; global.iniChance) {
            terrainMap[Y, X] = 1;
        } else {
            terrainMap[Y, X] = 0;
        }
    }
}

show_debug_message("initial positions defined in " + string((current_time - timer)/1000) + "s");
timer = current_time;

//genTilePos()
for (var i = 0; i &lt; global.numRun; i++) {
    for (var a = 0; a &lt; array_height_2d(terrainMap); a++) {
        for (var b = 0; b &lt; array_length_2d(terrainMap, a); b++) {
            oldMap[a, b] = terrainMap[a, b];
        }
    }
    
    for (var Y = 0; Y &lt; height; Y++) {
        for (var X = 0; X &lt; width; X++) {
            var neighb = 0;
            for (var bY = -1; bY &lt; 2; bY++) {
                for (var bX = -1; bX &lt; 2; bX++) {
                    if (bX == 0 &amp;&amp; bY == 0) { continue; }
                    if ((X+bX) &gt;= 0 &amp;&amp; (X+bX) &lt; width &amp;&amp; (Y+bY) &gt;= 0 &amp;&amp; (Y+bY) &lt; height) {
                        neighb += oldMap[X+bX, Y+bY];
                    } else {
                        neighb++;
                    }
                }
            }
            if (oldMap[X, Y] == 1) {
                if (neighb &lt; global.deathLimit) {
                    terrainMap[X, Y] = 0;
                } else {
                    terrainMap[X, Y] = 1;
                }
            }
            
            if (oldMap[X, Y] == 0) {
                if (neighb &gt; global.birthLimit) {
                    terrainMap[X, Y] = 1;
                } else {
                    terrainMap[X, Y] = 0;
                }
            }
        }
    }
}

show_debug_message("tile positions updated " + string(global.numRun) + " times in " + string((current_time - timer)/1000) + "s");
timer = current_time;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///surfacing
update = true;
surface = surface_create(room_width, room_height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SWITCH COLOURS
var colorTemp = color0;
color0 = color1;
color1 = colorTemp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UPDATE
show_debug_message("start genTilePos()");
timer = current_time;

for (var i = 0; i &lt; global.numRun; i++) {
    for (var a = 0; a &lt; array_height_2d(terrainMap); a++) {
        for (var b = 0; b &lt; array_length_2d(terrainMap, a); b++) {
            oldMap[a, b] = terrainMap[a, b];
        }
    }
    
    for (var Y = 0; Y &lt; height; Y++) {
        for (var X = 0; X &lt; width; X++) {
            var neighb = 0;
            for (var bY = -1; bY &lt; 2; bY++) {
                for (var bX = -1; bX &lt; 2; bX++) {
                    if (bX == 0 &amp;&amp; bY == 0) { continue; }
                    if ((X+bX) &gt;= 0 &amp;&amp; (X+bX) &lt; width &amp;&amp; (Y+bY) &gt;= 0 &amp;&amp; (Y+bY) &lt; height) {
                        neighb += oldMap[X+bX, Y+bY];
                    } else {
                        neighb++;
                    }
                }
            }
            if (oldMap[X, Y] == 1) {
                if (neighb &lt; global.deathLimit) {
                    terrainMap[X, Y] = 0;
                } else {
                    terrainMap[X, Y] = 1;
                }
            }
            
            if (oldMap[X, Y] == 0) {
                if (neighb &gt; global.birthLimit) {
                    terrainMap[X, Y] = 1;
                } else {
                    terrainMap[X, Y] = 0;
                }
            }
        }
    }
}

show_debug_message("tile positions updated " + string(global.numRun) + " times in " + string((current_time - timer)/1000) + "s");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drawing on surface
if (update) {
    if (!surface_exists(surface)) {
        surface = surface_create(room_width, room_height);
    }
    
    surface_set_target(surface);
    for (var Y = 0; Y &lt; height; Y++) {
        for (var X = 0; X &lt; width; X++) {
            if (terrainMap[X, Y] == 1) {
                var posX = X * global.tileSize;
                var posY = Y * global.tileSize;
                draw_rectangle_colour(posX, posY, posX+(global.tileSize-1), posY+(global.tileSize-1), color1, color1, color1, color1, false);
            }
        
            if (terrainMap[X, Y] == 0) {
                var posX = X * global.tileSize;
                var posY = Y * global.tileSize;
                draw_rectangle_colour(posX, posY, posX+(global.tileSize-1), posY+(global.tileSize-1), color0, color0, color0, color0, false);
            }
        }
    }
    update = false;
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the surface
if (surface_exists(surface)) {
    draw_surface(surface, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
