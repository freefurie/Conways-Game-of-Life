<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///attributes
array[0] = "twat";
array[1] = 22;
array[2] = true;

//global variables
global.iniChance = 0;
global.birthLimit = 0;
global.deathLimit = 0;
global.numRun = 0;
global.tileSize = 0;

//hud formatting
posX = 1000;
posY = 1768;
viewW = 1024;
viewH = 200;
spaceX = viewW / 6;
spaceY = (viewH / 2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sliding sliders
sl_initChance = instance_create((posX + 20) + (spaceX * 0), posY + 60, obj_bar);
sl_birthLimit = instance_create((posX + 20) + (spaceX * 1), posY + 60, obj_bar);
sl_deathLimit = instance_create((posX + 20) + (spaceX * 2), posY + 60, obj_bar);
sl_numRun = instance_create((posX + 20) + (spaceX * 3), posY + 60, obj_bar);
sl_tileSize = instance_create((posX + 20) + (spaceX * 4), posY + 60, obj_bar);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///zoom attributes
windowMaxW = view_wview[1];
windowMaxH = view_hview[1];
zoomSpeed = 50; //lower is faster

defViewW = view_wview[1];
defViewH = view_hview[1];
defViewX = view_xview[1];
defViewY = view_yview[1];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///buttons
if (!instance_exists(obj_generatorWayOfLife)) {
    //start button
    if (point_in_rectangle(mouse_x, mouse_y, posX + (spaceX*5) + 10, posY + 6, posX + (spaceX*5) + spaceX - 7, posY + 94)) {
        if (mouse_check_button_pressed(mb_left)) {
            instance_create(0, 0, obj_generatorWayOfLife);
        }
    }
} else {
    //update button
    if (point_in_rectangle(mouse_x, mouse_y, posX + (spaceX*5) + 10, posY + 6, posX + (spaceX*5) + spaceX - 7, posY + 32)) {
        if (mouse_check_button_pressed(mb_left)) {
            with (instance_find(obj_generatorWayOfLife, 0)) {
                update = true;
                event_user(0);
            }
        }
    }
    
    //switch colour button
    if (point_in_rectangle(mouse_x, mouse_y, posX + (spaceX*5) + 10, posY + 37, posX + (spaceX*5) + spaceX - 7, posY + 63)) {
        if (mouse_check_button_pressed(mb_left)) {
            with (instance_find(obj_generatorWayOfLife, 0)) {
                update = true;
                event_user(1);
            }
        }
    }
    
    //reset
    if (point_in_rectangle(mouse_x, mouse_y, posX + (spaceX*5) + 10, posY + 68, posX + (spaceX*5) + spaceX - 7, posY + 94)) {
        if (mouse_check_button_pressed(mb_left)) {
            if (surface_exists(instance_find(obj_generatorWayOfLife, 0).surface)) {
                var date = string(current_month) + "-" + string(current_day) + "_";
                var time = string(current_hour) + "-" + string(current_minute) + "-" + string(current_second) + "_";
                var stuff = string(global.tileSize);
                surface_save(instance_find(obj_generatorWayOfLife, 0).surface, date + time + stuff + ".png")
                surface_free(instance_find(obj_generatorWayOfLife, 0).surface);
            }
            instance_destroy(instance_find(obj_generatorWayOfLife, 0));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///updating the global variables
//between 0 and 100
global.iniChance = sl_initChance.slider.percentage;
//between 1 and 8
global.birthLimit = floor(sl_birthLimit.slider.percentage / 12.5);
//between 1 and 8
global.deathLimit = floor(sl_deathLimit.slider.percentage / 12.5);
//between 1 and 10
global.numRun = floor(sl_numRun.slider.percentage / 10);

if (!instance_exists(instance_find(obj_generatorWayOfLife, 0))) {
    //between 1 and 128 (power of 2)
    global.tileSize = power(2, floor(sl_tileSize.slider.percentage / 14.29));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///panning &amp; zooming
//panning
if (mouse_check_button_pressed(mb_left)) {
    //this gets mouse in relation to window, not view, since view is going to be moved around
    mouseXStart = window_views_mouse_get_x();
    mouseYStart = window_views_mouse_get_y();
}

if (mouse_check_button(mb_left) &amp;&amp; point_in_rectangle(mouse_x, mouse_y, defViewX, defViewY, defViewX + defViewW, defViewY + defViewH)) {
    view_xview[1] += mouseXStart - window_views_mouse_get_x();
    view_yview[1] += mouseYStart - window_views_mouse_get_y();
}

//zooming in
if (mouse_wheel_up()) {
    if ((view_wview[1] &gt; 100) &amp;&amp; (view_hview[1] &gt; 100)) {
        //current scale for reference
        prevViewX = view_wview[1];
        prevViewY = view_hview[1];
        
        //increase view scale based on zoom_speed variable
        //dividing based on original X and Y scales so aspect ratio remains consistent
        view_hview[1] -= windowMaxH / zoomSpeed;
        view_wview[1] -= windowMaxW / zoomSpeed;
        
        //zoom towards center of view, and not the default top left
        view_xview[1] += abs(view_wview[1] - prevViewX) / 2;
        view_yview[1] += abs(view_hview[1] - prevViewY) / 2;
        
        if (view_wview[1] &lt; 100) {
            view_wview[1] = 100;
        }
        
        if (view_hview[1] &lt; 100) {
            view_hview[1] = 100;
        }
    }
}

//zooming out
if (mouse_wheel_down()) {
    if ((view_wview[1] &lt;= defViewH) &amp;&amp; (view_hview[1] &lt;= defViewH)) {
        //current scale for reference
        prevViewX = view_wview[1];
        prevViewY = view_hview[1];
        
        //increase view scale based on zoom_speed variable
        //dividing based on original X and Y scales so aspect ratio remains consistent
        view_hview[1] += windowMaxH / zoomSpeed;
        view_wview[1] += windowMaxW / zoomSpeed;
        
        //zoom towards center of view, and not the default top left
        view_xview[1] -= abs(view_wview[1] - prevViewX) / 2;
        view_yview[1] -= abs(view_hview[1] - prevViewY) / 2;
    } else {
        view_wview[1] = defViewW;
        view_hview[1] = defViewH;
        view_xview[1] = defViewX;
        view_yview[1] = defViewY;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drawing settings
if (view_current == 0) {
    draw_set_halign(fa_left);
    draw_set_color(c_black);
    draw_set_font(fnt_settings);
    
    //background
    draw_rectangle_colour(posX, posY, posX + viewW, posY + viewH, c_ltgray, c_ltgray, c_ltgray, c_ltgray, false);
    draw_line_colour(posX, posY, posX + viewW, posY, c_black, c_black);
    draw_line_colour(posX, posY + viewH, posX + viewW, posY + viewH, c_black, c_black);
    draw_line_colour(posX, posY + spaceY, posX + (spaceX*5), posY + spaceY, c_black, c_black);
    for (var i = 0; i &lt; 7; i++) {
        draw_line_colour(posX + (spaceX*i), posY, posX + (spaceX*i), posY + viewH, c_black, c_black);
    }
    
    //sections
    draw_text(posX + (spaceX*0) + 5, posY + 5, "Initial chance: " + string(global.iniChance));
    draw_text(posX + (spaceX*1) + 5, posY + 5, "Birth limit: " + string(global.birthLimit));
    draw_text(posX + (spaceX*2) + 5, posY + 5, "Death Limit: " + string(global.deathLimit));
    draw_text(posX + (spaceX*3) + 5, posY + 5, "Number of runs: " + string(global.numRun));
    draw_text(posX + (spaceX*4) + 5, posY + 5, "Size of tile: " + string(global.tileSize));
    
    //buttons    
    draw_set_halign(fa_middle);
    if (!instance_exists(obj_generatorWayOfLife)) {
        draw_rectangle_colour(posX + (spaceX*5) + 10, posY + 6, posX + (spaceX*5) + spaceX - 7, posY + viewH - 6, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false);
        
        draw_set_valign(fa_middle);
        draw_text(posX + (spaceX*5) + (spaceX / 2), posY + spaceY, "Start");
        draw_set_valign(fa_top);
    } else {
        draw_rectangle_colour(posX + (spaceX*5) + 10, posY + 6 + (38.6*0), posX + (spaceX*5) + spaceX - 7, posY + 6 + (38.6*0) + 33.6, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false);
        draw_rectangle_colour(posX + (spaceX*5) + 10, posY + 6 + (38.6*1), posX + (spaceX*5) + spaceX - 7, posY + 6 + (38.6*1) + 33.6, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false);
        draw_rectangle_colour(posX + (spaceX*5) + 10, posY + 6 + (38.6*2), posX + (spaceX*5) + spaceX - 7, posY + 6 + (38.6*2) + 33.6, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false);
        draw_rectangle_colour(posX + (spaceX*5) + 10, posY + 6 + (38.6*3), posX + (spaceX*5) + spaceX - 7, posY + 6 + (38.6*3) + 33.6, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false);
        draw_rectangle_colour(posX + (spaceX*5) + 10, posY + 6 + (38.6*4), posX + (spaceX*5) + spaceX - 7, posY + 6 + (38.6*4) + 33.6, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false);
        
        draw_set_valign(fa_middle);
        draw_text(posX + (spaceX*5) + (spaceX / 2), posY + 6 + (38.6*0) + 16.8, "Update");
        draw_text(posX + (spaceX*5) + (spaceX / 2), posY + 6 + (38.6*1) + 16.8, "Swap Colour");
        draw_text(posX + (spaceX*5) + (spaceX / 2), posY + 6 + (38.6*2) + 16.8, "Stop");
        draw_text(posX + (spaceX*5) + (spaceX / 2), posY + 6 + (38.6*3) + 16.8, "Export to PNG");
        draw_text(posX + (spaceX*5) + (spaceX / 2), posY + 6 + (38.6*4) + 16.8, "Export to TXT");
        draw_set_valign(fa_top);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
